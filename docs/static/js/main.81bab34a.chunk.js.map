{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","components/GifExpertApp.js","serviceWorker.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","aux","substring","toUpperCase","cats","type","value","onChange","target","placeholder","GifGridItem","img","className","title","src","url","getGifs","category","a","fetch","res","json","data","gifs","map","id","images","downsized_medium","GifGrid","imgs","setImgs","useEffect","then","key","GifExpert","categories","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,0BAAMC,SAZc,SAACC,GAGrB,GAFAA,EAAEC,iBAEe,IAAdJ,GAAoBA,EAAWK,OAAS,EAC3C,CACI,IAAIC,EAAMN,EAAWO,UAAU,EAAG,GAClCD,EAAMA,EAAIE,cAAgBR,EAAWO,UAAU,EAAGP,EAAWK,QAC7DP,GAAc,SAACW,GAAD,MAAU,CAACH,SAMzB,6BACI,2BAAOI,KAAK,OAAOC,MAAOX,EAAYY,SAlB3B,SAACT,GACpBF,EAAcE,EAAEU,OAAOF,QAiBiDG,YAAY,iCCvB/EC,EAAc,SAAC,GAAW,IAAVC,EAAS,EAATA,IACzB,OACI,yBAAKC,UAAU,oDACX,yBAAKA,UAAU,aACX,4BAAKD,EAAIE,OACT,yBAAKC,IAAKH,EAAII,S,uBCNjBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbH,EAFa,iDAEmCE,EAFnC,+DAGDE,MAAMJ,GAHL,cAGbK,EAHa,gBAIEA,EAAIC,OAJN,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAb,GAAQ,IAAD,EACzB,MAAO,CACHc,GAAKd,EAAIc,GACTZ,MAAOF,EAAIE,MACXE,IAAG,UAAEJ,EAAIe,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZQ,GAdY,4CAAH,sDCGPK,EAAU,SAAC,GAAgB,IAAfX,EAAc,EAAdA,SAAc,EAEXvB,mBAAS,IAFE,mBAE5BmC,EAF4B,KAEtBC,EAFsB,KAWnC,OAPAC,qBAAU,WACNf,EAAQC,GAAUe,MAAK,SAACH,GACpBC,EAAQD,QAEb,CAAEZ,IAID,oCACI,4BAAKA,GACL,yBAAKL,UAAU,iBAEHiB,EAAKL,KAAI,SAAAb,GACL,OAAO,kBAAC,EAAD,CAAasB,IAAKtB,EAAIc,GAAId,IAAKA,UCjBrDuB,EAAY,WAAO,IAAD,EAESxC,mBAAS,IAFlB,mBAEpByC,EAFoB,KAER1C,EAFQ,KAQ3B,OACI,yBAAKmB,UAAU,kBACX,8CACA,kBAAC,EAAD,CAAanB,cAAeA,IAC5B,6BAEA,4BACS0C,EAAWX,KAAI,SAACP,GACb,OAAO,kBAAC,EAAD,CAASgB,IAAKhB,EAAUA,SAAUA,UCR7CmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD4HpC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.81bab34a.chunk.js","sourcesContent":["import React, {useState, createRef} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const onChangeHandle = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const onSubmitHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputValue != \"\" && inputValue.length > 2)\r\n        {\r\n            let aux = inputValue.substring(0, 1);\r\n            aux = aux.toUpperCase() + inputValue.substring(1, inputValue.length);\r\n            setCategories((cats) => [aux]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmitHandler}>\r\n            <div>\r\n                <input type=\"text\" value={inputValue} onChange={onChangeHandle} placeholder=\"Ingrese categoria deseada\"></input>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ({img}) => {\r\n    return (\r\n        <div className=\"card-grid-item animate__animated animate__fadeIn\">\r\n            <div className=\"grid-item\">\r\n                <h2>{img.title}</h2>\r\n                <img src={img.url}></img>\r\n            </div>  \r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${category}&limit=10&api_key=UUzLIuJEWrBCVKagPEaBgAJ6PbNQmyhV`;\r\n    const res = await fetch(url);\r\n    const {data} = await res.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id : img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    const [imgs, setImgs] = useState([])\r\n\r\n    useEffect(()=> {\r\n        getGifs(category).then((imgs) => {\r\n            setImgs(imgs);\r\n        });\r\n    }, [ category ]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>{category}</h2>\r\n            <div className=\"cnt-card-grid\">\r\n                    {\r\n                        imgs.map(img => {\r\n                            return <GifGridItem key={img.id} img={img}/>\r\n                        })\r\n                    }   \r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport {AddCategory} from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nexport const GifExpert = () => {\r\n\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    /*const agregarUno = () => {\r\n        setCategories([\"HunterXHunter\", ...categories]);\r\n    }*/\r\n\r\n    return (\r\n        <div className='cnt-gif-expert'>\r\n            <h3>Gif Expert App</h3>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr></hr>\r\n\r\n            <ul>\r\n                    {categories.map((category) => {\r\n                        return <GifGrid key={category} category={category}/>\r\n                    })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpert } from './components/GifExpertApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <GifExpert/>, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}